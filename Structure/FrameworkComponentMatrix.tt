<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
List<string> componentList = new List<string>();
bool recording = false;
foreach(string property in File.ReadLines(this.Host.ResolvePath("Framework.cs")))
{
	if(!recording){
		if(property.Contains("<Matrix>"))
			recording = true;
	}
	else{
		if(property.Contains("</Matrix>"))
			recording = false;
		else{
			var line = property.Trim('\t').Split(' ');
			if(line[0]=="public" && property.Contains("get") && property.Contains("set"))
				componentList.Add(line[1]);
		}
	}
}
#>
/*--------------------------------------
This file was generated!
The generator targets "Framework.cs" to extract an interface from
the properties between the bullets <Matrix></Matrix>. It also generates
a frameworkcomponent base class implementing the aforementioned interface
--------------------------------------*/
using System.Windows;

namespace VulkanSharpWPF {
	interface IFrameworkComponentMatrix {
<# foreach (string property in componentList){ #>
		<#= property #> <#= property #> { get; }
<#}#>
	}

	abstract partial class FrameworkComponent : IFrameworkComponentMatrix {
<# foreach (string property in componentList) {#>
		public <#= property #> <#= property #> => Framework.<#= property #>;
<#}#>
		public Framework Framework { get; private set; }
		public FrameworkComponent(Framework framework) => Framework = framework;
	}
}